AWSTemplateFormatVersion: "2010-09-09"
Description: Dask Cluster Setup for NYC Taxi Data Analysis


Parameters:

  DeploymentPrefix:
    Type: String
    Description: Prefix to assign to all resources created in this stack

  NotebookToken:
    Type: String
    Description: Token for Jupyter Notebook Auth on Dask Scheduler instance <Public IP>:8888?token=<token>

  InstanceType:
    Type: String
    Description: Instance type to use for Scheduler and Workers
    Default: m5.2xlarge

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair name to use to ssh into Scheduler
    Default: ''



Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'DASK']]


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'DASK']]


  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'DASK-Public-Route-Table']]


  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic
      - InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTablePublic
      GatewayId: !Ref InternetGateway


  SubnetPublicA:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'DASK-SubnetPublicA']]


  SubnetPublicARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePublic
      - SubnetPublicA
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA


  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      Description: Allow all resources with this security group to talk to eachother
      SourceSecurityGroupId: !Ref SecurityGroup
      FromPort: -1
      ToPort: -1
      GroupId: !Ref SecurityGroup
      IpProtocol: -1


  SecurityGroupIngressWebViews:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Allow any ip to see ports 8786 thru 8888
      FromPort: 8786
      ToPort: 8888
      GroupId: !Ref SecurityGroup
      IpProtocol: -1


  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref DeploymentPrefix, 'DASK-SG-Default']]
      GroupDescription: The default security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'DASK-SecurityGroup-Default']]

  ElasticIP:
    Type: AWS::EC2::EIP

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    DependsOn: DaskScheduler
    Properties:
      EIP: !Ref ElasticIP
      InstanceId: !Ref DaskScheduler
      PrivateIpAddress: 10.0.0.5


  DaskScheduler:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-ca0135b3
      InstanceType: "t2.medium"
      PrivateIpAddress: 10.0.0.5
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref SubnetPublicA
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/ec2-user/.local/bin:/home/ec2-user/bin
            export EXTERNAL_IP=${EIP}
            yum update -y
            yum install -y docker git python36 python36-devel graphviz
            yum groupinstall -y 'Development Tools'

            service docker start
            docker run -d --network=host milesg/tda-daskworker:latest dask-scheduler

            echo "Cloning in directory: " $(pwd)
            git clone https://github.com/milesgranger/nyc-taxi-aws.git
            cd ./nyc-taxi-aws
            python36 -m pip install --upgrade pip==10.0.1
            python36 -m pip install -r ./requirements.txt
            echo "Launching jupyter!"
            nohup jupyter notebook --NotebookApp.token='${NotebookTokenParam}' --ip=0.0.0.0 --no-browser --allow-root &
            echo "Jupyter running!"

          - NotebookTokenParam:
              !Ref NotebookToken
            EIP:
              !Ref ElasticIP

      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'Scheduler']]

  Worker1:
    Type: AWS::EC2::Instance
    DependsOn: DaskScheduler
    Properties:
      ImageId: ami-ca0135b3
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref SubnetPublicA
      UserData:
        Fn::Base64: !Sub
         - |
           #!/bin/bash -ex
           exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
           yum update -y
           yum install -y docker

           service docker start
           docker run -d --network=host milesg/tda-daskworker:latest dask-worker ${SCHEDULER_IP} --nanny
         - SCHEDULER_IP: 10.0.0.5:8786


      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'Worker1']]


  Worker2:
    Type: AWS::EC2::Instance
    DependsOn: DaskScheduler
    Properties:
      ImageId: ami-ca0135b3
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref SubnetPublicA
      UserData:
        Fn::Base64: !Sub
         - |
           #!/bin/bash -ex
           exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
           yum update -y
           yum install -y docker

           service docker start
           docker run -d --network=host milesg/tda-daskworker:latest dask-worker ${SCHEDULER_IP} --nanny
         - SCHEDULER_IP: 10.0.0.5:8786


      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref DeploymentPrefix, 'Worker2']]



